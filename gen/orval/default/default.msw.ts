/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * User API
 * Example API generated by Stoplight
 * OpenAPI spec version: 1.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getGetUserMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.internet.email(), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), emailVerified: faker.datatype.boolean(), createDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})

export const getPatchUserMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.internet.email(), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), emailVerified: faker.datatype.boolean(), createDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})

export const getPostUserMock = () => ({id: faker.datatype.number({min: undefined, max: undefined}), firstName: faker.random.word(), lastName: faker.random.word(), email: faker.internet.email(), dateOfBirth: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined]), emailVerified: faker.datatype.boolean(), createDate: faker.helpers.arrayElement([faker.date.past().toISOString().split('T')[0], undefined])})

export const getDefaultMSW = () => [
rest.get('*/users/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserMock()),
        )
      }),rest.patch('*/users/:userId', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPatchUserMock()),
        )
      }),rest.post('*/user', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getPostUserMock()),
        )
      }),]
