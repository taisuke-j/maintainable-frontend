/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * User API
 * Example API generated by Stoplight
 * OpenAPI spec version: 1.0
 */
import axios from 'axios'
import type {
  AxiosRequestConfig,
  AxiosResponse,
  AxiosError
} from 'axios'
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import type {
  User,
  PatchUserBody,
  PostUserBody
} from '.././model'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Retrieve the information of the user with the matching user ID.
 * @summary Get User Info by User ID
 */
export const getUser = (
    userId: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.get(
      `/users/${userId}`,options
    );
  }


export const getGetUserQueryKey = (userId: number,) => [`/users/${userId}`];

    
export type GetUserQueryResult = NonNullable<Awaited<ReturnType<typeof getUser>>>
export type GetUserQueryError = AxiosError<void>

export const useGetUser = <TData = Awaited<ReturnType<typeof getUser>>, TError = AxiosError<void>>(
 userId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey(userId);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({ signal }) => getUser(userId, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof getUser>>, TError, TData>(queryKey, queryFn, {enabled: !!(userId), ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}

/**
 * Update the information of an existing user.
 * @summary Update User Information
 */
export const patchUser = (
    userId: number,
    patchUserBody: PatchUserBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.patch(
      `/users/${userId}`,
      patchUserBody,options
    );
  }



    export type PatchUserMutationResult = NonNullable<Awaited<ReturnType<typeof patchUser>>>
    export type PatchUserMutationBody = PatchUserBody
    export type PatchUserMutationError = AxiosError<void>

    export const usePatchUser = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchUser>>, TError,{userId: number;data: PatchUserBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchUser>>, {userId: number;data: PatchUserBody}> = (props) => {
          const {userId,data} = props ?? {};

          return  patchUser(userId,data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof patchUser>>, TError, {userId: number;data: PatchUserBody}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Create a new user.
 * @summary Create New User
 */
export const postUser = (
    postUserBody: PostUserBody, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.post(
      `/user`,
      postUserBody,options
    );
  }



    export type PostUserMutationResult = NonNullable<Awaited<ReturnType<typeof postUser>>>
    export type PostUserMutationBody = PostUserBody
    export type PostUserMutationError = AxiosError<void>

    export const usePostUser = <TError = AxiosError<void>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postUser>>, TError,{data: PostUserBody}, TContext>, axios?: AxiosRequestConfig}
) => {
      const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postUser>>, {data: PostUserBody}> = (props) => {
          const {data} = props ?? {};

          return  postUser(data,axiosOptions)
        }

      return useMutation<Awaited<ReturnType<typeof postUser>>, TError, {data: PostUserBody}, TContext>(mutationFn, mutationOptions)
    }
    